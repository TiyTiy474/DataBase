// <auto-generated />
using System;
using DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBase.Migrations
{
    [DbContext(typeof(MusicStoreContext))]
    partial class MusicStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("DataBase.Artist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("DataBase.Disc", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsKaraoke")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GenreId");

                    b.ToTable("Discs");
                });

            modelBuilder.Entity("DataBase.DiscountCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("ID");

                    b.ToTable("DiscountCards");
                });

            modelBuilder.Entity("DataBase.Employer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("DataBase.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("DataBase.Sale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscountCardID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SellerID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("DiscId")
                        .IsUnique();

                    b.HasIndex("DiscountCardID");

                    b.HasIndex("SellerID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("DataBase.Disc", b =>
                {
                    b.HasOne("DataBase.Artist", "Artist")
                        .WithMany("Discs")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataBase.Genre", "GenreNavigation")
                        .WithMany("Discs")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("GenreNavigation");
                });

            modelBuilder.Entity("DataBase.Sale", b =>
                {
                    b.HasOne("DataBase.Disc", "SoldDisc")
                        .WithOne("Sale")
                        .HasForeignKey("DataBase.Sale", "DiscId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.DiscountCard", "DiscountCard")
                        .WithMany("Sales")
                        .HasForeignKey("DiscountCardID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataBase.Employer", "Seller")
                        .WithMany("Sales")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiscountCard");

                    b.Navigation("Seller");

                    b.Navigation("SoldDisc");
                });

            modelBuilder.Entity("DataBase.Artist", b =>
                {
                    b.Navigation("Discs");
                });

            modelBuilder.Entity("DataBase.Disc", b =>
                {
                    b.Navigation("Sale")
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.DiscountCard", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("DataBase.Employer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("DataBase.Genre", b =>
                {
                    b.Navigation("Discs");
                });
#pragma warning restore 612, 618
        }
    }
}
